// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_ITEM_SHOP_H_
#define FLATBUFFERS_GENERATED_ITEM_SHOP_H_

#include "flatbuffers/flatbuffers.h"

namespace shop {

struct Price;

struct Item;
struct ItemBuilder;

enum Type : uint8_t {
  Type_Food = 0,
  Type_Toy = 1,
  Type_Daily = 2,
  Type_MIN = Type_Food,
  Type_MAX = Type_Daily
};

inline const Type (&EnumValuesType())[3] {
  static const Type values[] = {
    Type_Food,
    Type_Toy,
    Type_Daily
  };
  return values;
}

inline const char * const *EnumNamesType() {
  static const char * const names[4] = {
    "Food",
    "Toy",
    "Daily",
    nullptr
  };
  return names;
}

inline const char *EnumNameType(Type e) {
  if (flatbuffers::IsOutRange(e, Type_Food, Type_Daily)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesType()[index];
}

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) Price FLATBUFFERS_FINAL_CLASS {
 private:
  float origin_;
  float discount_;

 public:
  Price()
      : origin_(0),
        discount_(0) {
  }
  Price(float _origin, float _discount)
      : origin_(flatbuffers::EndianScalar(_origin)),
        discount_(flatbuffers::EndianScalar(_discount)) {
  }
  float origin() const {
    return flatbuffers::EndianScalar(origin_);
  }
  float discount() const {
    return flatbuffers::EndianScalar(discount_);
  }
};
FLATBUFFERS_STRUCT_END(Price, 8);

struct Item FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ItemBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4,
    VT_PRICE = 6,
    VT_TYPE = 8,
    VT_FROM = 10
  };
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  const shop::Price *price() const {
    return GetStruct<const shop::Price *>(VT_PRICE);
  }
  shop::Type type() const {
    return static_cast<shop::Type>(GetField<uint8_t>(VT_TYPE, 0));
  }
  const flatbuffers::String *from() const {
    return GetPointer<const flatbuffers::String *>(VT_FROM);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyField<shop::Price>(verifier, VT_PRICE) &&
           VerifyField<uint8_t>(verifier, VT_TYPE) &&
           VerifyOffset(verifier, VT_FROM) &&
           verifier.VerifyString(from()) &&
           verifier.EndTable();
  }
};

struct ItemBuilder {
  typedef Item Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(Item::VT_NAME, name);
  }
  void add_price(const shop::Price *price) {
    fbb_.AddStruct(Item::VT_PRICE, price);
  }
  void add_type(shop::Type type) {
    fbb_.AddElement<uint8_t>(Item::VT_TYPE, static_cast<uint8_t>(type), 0);
  }
  void add_from(flatbuffers::Offset<flatbuffers::String> from) {
    fbb_.AddOffset(Item::VT_FROM, from);
  }
  explicit ItemBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<Item> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Item>(end);
    return o;
  }
};

inline flatbuffers::Offset<Item> CreateItem(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    const shop::Price *price = 0,
    shop::Type type = shop::Type_Food,
    flatbuffers::Offset<flatbuffers::String> from = 0) {
  ItemBuilder builder_(_fbb);
  builder_.add_from(from);
  builder_.add_price(price);
  builder_.add_name(name);
  builder_.add_type(type);
  return builder_.Finish();
}

inline flatbuffers::Offset<Item> CreateItemDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    const shop::Price *price = 0,
    shop::Type type = shop::Type_Food,
    const char *from = nullptr) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto from__ = from ? _fbb.CreateString(from) : 0;
  return shop::CreateItem(
      _fbb,
      name__,
      price,
      type,
      from__);
}

inline const shop::Item *GetItem(const void *buf) {
  return flatbuffers::GetRoot<shop::Item>(buf);
}

inline const shop::Item *GetSizePrefixedItem(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<shop::Item>(buf);
}

inline bool VerifyItemBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<shop::Item>(nullptr);
}

inline bool VerifySizePrefixedItemBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<shop::Item>(nullptr);
}

inline void FinishItemBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<shop::Item> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedItemBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<shop::Item> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace shop

#endif  // FLATBUFFERS_GENERATED_ITEM_SHOP_H_
